// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0
// source: grpc/ModuleBalancing.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Module_Upload_FullMethodName                = "/ModuleBalancing.Module/Upload"
	Module_Analyzing_FullMethodName             = "/ModuleBalancing.Module/Analyzing"
	Module_IntegrityVerification_FullMethodName = "/ModuleBalancing.Module/IntegrityVerification"
	Module_Push_FullMethodName                  = "/ModuleBalancing.Module/Push"
)

// ModuleClient is the client API for Module service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ModuleClient interface {
	Upload(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadRequest, UploadResponse], error)
	Analyzing(ctx context.Context, in *AnalyzingRequest, opts ...grpc.CallOption) (*AnalyzingResponse, error)
	IntegrityVerification(ctx context.Context, in *IntegrityVerificationRequest, opts ...grpc.CallOption) (*IntegrityVerificationResponse, error)
	Push(ctx context.Context, in *ModuleDownloadRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ModulePushResponse], error)
}

type moduleClient struct {
	cc grpc.ClientConnInterface
}

func NewModuleClient(cc grpc.ClientConnInterface) ModuleClient {
	return &moduleClient{cc}
}

func (c *moduleClient) Upload(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadRequest, UploadResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Module_ServiceDesc.Streams[0], Module_Upload_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UploadRequest, UploadResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Module_UploadClient = grpc.ClientStreamingClient[UploadRequest, UploadResponse]

func (c *moduleClient) Analyzing(ctx context.Context, in *AnalyzingRequest, opts ...grpc.CallOption) (*AnalyzingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnalyzingResponse)
	err := c.cc.Invoke(ctx, Module_Analyzing_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleClient) IntegrityVerification(ctx context.Context, in *IntegrityVerificationRequest, opts ...grpc.CallOption) (*IntegrityVerificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IntegrityVerificationResponse)
	err := c.cc.Invoke(ctx, Module_IntegrityVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleClient) Push(ctx context.Context, in *ModuleDownloadRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ModulePushResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Module_ServiceDesc.Streams[1], Module_Push_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ModuleDownloadRequest, ModulePushResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Module_PushClient = grpc.ServerStreamingClient[ModulePushResponse]

// ModuleServer is the server API for Module service.
// All implementations must embed UnimplementedModuleServer
// for forward compatibility.
type ModuleServer interface {
	Upload(grpc.ClientStreamingServer[UploadRequest, UploadResponse]) error
	Analyzing(context.Context, *AnalyzingRequest) (*AnalyzingResponse, error)
	IntegrityVerification(context.Context, *IntegrityVerificationRequest) (*IntegrityVerificationResponse, error)
	Push(*ModuleDownloadRequest, grpc.ServerStreamingServer[ModulePushResponse]) error
	mustEmbedUnimplementedModuleServer()
}

// UnimplementedModuleServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedModuleServer struct{}

func (UnimplementedModuleServer) Upload(grpc.ClientStreamingServer[UploadRequest, UploadResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedModuleServer) Analyzing(context.Context, *AnalyzingRequest) (*AnalyzingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Analyzing not implemented")
}
func (UnimplementedModuleServer) IntegrityVerification(context.Context, *IntegrityVerificationRequest) (*IntegrityVerificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IntegrityVerification not implemented")
}
func (UnimplementedModuleServer) Push(*ModuleDownloadRequest, grpc.ServerStreamingServer[ModulePushResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (UnimplementedModuleServer) mustEmbedUnimplementedModuleServer() {}
func (UnimplementedModuleServer) testEmbeddedByValue()                {}

// UnsafeModuleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModuleServer will
// result in compilation errors.
type UnsafeModuleServer interface {
	mustEmbedUnimplementedModuleServer()
}

func RegisterModuleServer(s grpc.ServiceRegistrar, srv ModuleServer) {
	// If the following call pancis, it indicates UnimplementedModuleServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Module_ServiceDesc, srv)
}

func _Module_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ModuleServer).Upload(&grpc.GenericServerStream[UploadRequest, UploadResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Module_UploadServer = grpc.ClientStreamingServer[UploadRequest, UploadResponse]

func _Module_Analyzing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyzingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServer).Analyzing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Module_Analyzing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServer).Analyzing(ctx, req.(*AnalyzingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Module_IntegrityVerification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntegrityVerificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServer).IntegrityVerification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Module_IntegrityVerification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServer).IntegrityVerification(ctx, req.(*IntegrityVerificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Module_Push_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ModuleDownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ModuleServer).Push(m, &grpc.GenericServerStream[ModuleDownloadRequest, ModulePushResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Module_PushServer = grpc.ServerStreamingServer[ModulePushResponse]

// Module_ServiceDesc is the grpc.ServiceDesc for Module service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Module_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ModuleBalancing.Module",
	HandlerType: (*ModuleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Analyzing",
			Handler:    _Module_Analyzing_Handler,
		},
		{
			MethodName: "IntegrityVerification",
			Handler:    _Module_IntegrityVerification_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _Module_Upload_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Push",
			Handler:       _Module_Push_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc/ModuleBalancing.proto",
}

const (
	Expirationpush_Expiration_FullMethodName = "/ModuleBalancing.Expirationpush/Expiration"
)

// ExpirationpushClient is the client API for Expirationpush service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExpirationpushClient interface {
	Expiration(ctx context.Context, in *ExpirationPushRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ExpirationPushResponse], error)
}

type expirationpushClient struct {
	cc grpc.ClientConnInterface
}

func NewExpirationpushClient(cc grpc.ClientConnInterface) ExpirationpushClient {
	return &expirationpushClient{cc}
}

func (c *expirationpushClient) Expiration(ctx context.Context, in *ExpirationPushRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ExpirationPushResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Expirationpush_ServiceDesc.Streams[0], Expirationpush_Expiration_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ExpirationPushRequest, ExpirationPushResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Expirationpush_ExpirationClient = grpc.ServerStreamingClient[ExpirationPushResponse]

// ExpirationpushServer is the server API for Expirationpush service.
// All implementations must embed UnimplementedExpirationpushServer
// for forward compatibility.
type ExpirationpushServer interface {
	Expiration(*ExpirationPushRequest, grpc.ServerStreamingServer[ExpirationPushResponse]) error
	mustEmbedUnimplementedExpirationpushServer()
}

// UnimplementedExpirationpushServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedExpirationpushServer struct{}

func (UnimplementedExpirationpushServer) Expiration(*ExpirationPushRequest, grpc.ServerStreamingServer[ExpirationPushResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Expiration not implemented")
}
func (UnimplementedExpirationpushServer) mustEmbedUnimplementedExpirationpushServer() {}
func (UnimplementedExpirationpushServer) testEmbeddedByValue()                        {}

// UnsafeExpirationpushServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExpirationpushServer will
// result in compilation errors.
type UnsafeExpirationpushServer interface {
	mustEmbedUnimplementedExpirationpushServer()
}

func RegisterExpirationpushServer(s grpc.ServiceRegistrar, srv ExpirationpushServer) {
	// If the following call pancis, it indicates UnimplementedExpirationpushServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Expirationpush_ServiceDesc, srv)
}

func _Expirationpush_Expiration_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExpirationPushRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExpirationpushServer).Expiration(m, &grpc.GenericServerStream[ExpirationPushRequest, ExpirationPushResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Expirationpush_ExpirationServer = grpc.ServerStreamingServer[ExpirationPushResponse]

// Expirationpush_ServiceDesc is the grpc.ServiceDesc for Expirationpush service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Expirationpush_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ModuleBalancing.Expirationpush",
	HandlerType: (*ExpirationpushServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Expiration",
			Handler:       _Expirationpush_Expiration_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc/ModuleBalancing.proto",
}

const (
	Storerecord_Updatestorerecord_FullMethodName = "/ModuleBalancing.Storerecord/Updatestorerecord"
)

// StorerecordClient is the client API for Storerecord service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorerecordClient interface {
	Updatestorerecord(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[StorerecordRequest, StorerecordResponse], error)
}

type storerecordClient struct {
	cc grpc.ClientConnInterface
}

func NewStorerecordClient(cc grpc.ClientConnInterface) StorerecordClient {
	return &storerecordClient{cc}
}

func (c *storerecordClient) Updatestorerecord(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[StorerecordRequest, StorerecordResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Storerecord_ServiceDesc.Streams[0], Storerecord_Updatestorerecord_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StorerecordRequest, StorerecordResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Storerecord_UpdatestorerecordClient = grpc.ClientStreamingClient[StorerecordRequest, StorerecordResponse]

// StorerecordServer is the server API for Storerecord service.
// All implementations must embed UnimplementedStorerecordServer
// for forward compatibility.
type StorerecordServer interface {
	Updatestorerecord(grpc.ClientStreamingServer[StorerecordRequest, StorerecordResponse]) error
	mustEmbedUnimplementedStorerecordServer()
}

// UnimplementedStorerecordServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStorerecordServer struct{}

func (UnimplementedStorerecordServer) Updatestorerecord(grpc.ClientStreamingServer[StorerecordRequest, StorerecordResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Updatestorerecord not implemented")
}
func (UnimplementedStorerecordServer) mustEmbedUnimplementedStorerecordServer() {}
func (UnimplementedStorerecordServer) testEmbeddedByValue()                     {}

// UnsafeStorerecordServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorerecordServer will
// result in compilation errors.
type UnsafeStorerecordServer interface {
	mustEmbedUnimplementedStorerecordServer()
}

func RegisterStorerecordServer(s grpc.ServiceRegistrar, srv StorerecordServer) {
	// If the following call pancis, it indicates UnimplementedStorerecordServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Storerecord_ServiceDesc, srv)
}

func _Storerecord_Updatestorerecord_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StorerecordServer).Updatestorerecord(&grpc.GenericServerStream[StorerecordRequest, StorerecordResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Storerecord_UpdatestorerecordServer = grpc.ClientStreamingServer[StorerecordRequest, StorerecordResponse]

// Storerecord_ServiceDesc is the grpc.ServiceDesc for Storerecord service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Storerecord_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ModuleBalancing.Storerecord",
	HandlerType: (*StorerecordServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Updatestorerecord",
			Handler:       _Storerecord_Updatestorerecord_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "grpc/ModuleBalancing.proto",
}
